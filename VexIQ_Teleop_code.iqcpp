#pragma region VEXcode Generated Robot Configuration
// Make sure all required headers are included.
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <string.h>


#include "vex.h"

using namespace vex;

// Brain should be defined by default
brain Brain;


// START IQ MACROS
#define waitUntil(condition)                                                   \
  do {                                                                         \
    wait(5, msec);                                                             \
  } while (!(condition))

#define repeat(iterations)                                                     \
  for (int iterator = 0; iterator < iterations; iterator++)
// END IQ MACROS


// Robot configuration code.
inertial BrainInertial = inertial();
controller Controller = controller();
motor LeftDriveSmart = motor(PORT3, 3, false);
motor RightDriveSmart = motor(PORT10, 3, true);
drivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 200, 173, 76, mm, 1);
motor Motor1 = motor(PORT1, true);
motor Motor2 = motor(PORT2, true);
motor Motor7 = motor(PORT7, false);
motor Motor8 = motor(PORT8, false);
pneumatic Pneumatic9 = pneumatic(PORT9);
bumper Bumper5 = bumper(PORT5);
bumper Bumper4 = bumper(PORT4);


// generating and setting random seed
void initializeRandomSeed(){
  wait(100,msec);
  double xAxis = BrainInertial.acceleration(xaxis) * 1000;
  double yAxis = BrainInertial.acceleration(yaxis) * 1000;
  double zAxis = BrainInertial.acceleration(zaxis) * 1000;
  // Combine these values into a single integer
  int seed = int(
    xAxis + yAxis + zAxis
  );
  // Set the seed
  srand(seed); 
}



void vexcodeInit() {

  // Initializing random seed.
  initializeRandomSeed(); 
}


// define variable for remote controller enable/disable
bool RemoteControlCodeEnabled = true;
// define variables used for controlling motors based on controller inputs
bool DrivetrainLNeedsToBeStopped_Controller = true;
bool DrivetrainRNeedsToBeStopped_Controller = true;

// define a task that will handle monitoring inputs from Controller
int rc_auto_loop_function_Controller() {
  // process the controller input every 20 milliseconds
  // update the motors based on the input values
  while(true) {
    if(RemoteControlCodeEnabled) {
      
      // calculate the drivetrain motor velocities from the controller joystick axies
      // left = AxisA + AxisC
      // right = AxisA - AxisC
      int drivetrainLeftSideSpeed = Controller.AxisA.position() + Controller.AxisC.position();
      int drivetrainRightSideSpeed = Controller.AxisA.position() - Controller.AxisC.position();
      
      // check if the value is inside of the deadband range
      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {
        // check if the left motor has already been stopped
        if (DrivetrainLNeedsToBeStopped_Controller) {
          // stop the left drive motor
          LeftDriveSmart.stop();
          // tell the code that the left motor has been stopped
          DrivetrainLNeedsToBeStopped_Controller = false;
        }
      } else {
        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range
        DrivetrainLNeedsToBeStopped_Controller = true;
      }
      // check if the value is inside of the deadband range
      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {
        // check if the right motor has already been stopped
        if (DrivetrainRNeedsToBeStopped_Controller) {
          // stop the right drive motor
          RightDriveSmart.stop();
          // tell the code that the right motor has been stopped
          DrivetrainRNeedsToBeStopped_Controller = false;
        }
      } else {
        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range
        DrivetrainRNeedsToBeStopped_Controller = true;
      }
      
      // only tell the left drive motor to spin if the values are not in the deadband range
      if (DrivetrainLNeedsToBeStopped_Controller) {
        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);
        LeftDriveSmart.spin(forward);
      }
      // only tell the right drive motor to spin if the values are not in the deadband range
      if (DrivetrainRNeedsToBeStopped_Controller) {
        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);
        RightDriveSmart.spin(forward);
      }
    }
    // wait before repeating the process
    wait(20, msec);
  }
  return 0;
}

task rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);

#pragma endregion VEXcode Generated Robot Configuration

// Include the IQ Library
#include "vex.h"
  
// Allows for easier use of the VEX Library
using namespace vex;

float myVariable;
int counter=0;
int rem;

void stop()
{
  Motor1.stop();
  Motor2.stop();
  Motor7.stop();
  Motor8.stop();

}
void Forward()
{
  Pneumatic9.extend(cylinder1);
  Motor1.spin(forward);
  Motor2.spin(forward);
  Motor7.spin(forward);
  Motor8.spin(forward);
}
void Backward()
{
  Pneumatic9.extend(cylinder1);
  Motor1.spin(reverse);
  Motor2.spin(reverse);
  Motor7.spin(reverse);
  Motor8.spin(reverse);
  

}
void bucket_intake_pnumatic_ret()
{
  
  Pneumatic9.retract(cylinder1);
}

void bucket_intake_pnumatic_ext()
{
  Pneumatic9.extend(cylinder1);
}
void purple_blocker_ret()
{
  Pneumatic9.extend(cylinder2);
}
void purple_blocker_ext()
{
  counter = counter+1;
  rem = counter%2;
  if(rem == 1)
  {
    Pneumatic9.retract(cylinder2);
  }
  else
  {
    Pneumatic9.extend(cylinder2);
  }
  
}


void buk_down()
{
  Pneumatic9.retract(cylinder1);
  while(Controller.ButtonRDown.pressing())
  {
    if(Bumper4.pressing() == 0)
  {

      



    Motor1.spin(reverse);
    Motor2.spin(reverse);
    Motor7.spin(reverse);
    Motor8.spin(reverse);
    
  }
  else
  {
    Motor1.stop();
    Motor2.stop();
    Motor7.stop();
    Motor8.stop();

  }
    
  }

    // Motor1.spin(forward);
    // Motor2.spin(forward);
    // Motor7.spin(forward);
    // Motor8.spin(forward);
  
  
  

}

void buk_up()
{
  
  Pneumatic9.retract(cylinder1);

  while(Controller.ButtonRUp.pressing())
  {

    if(Bumper5.pressing() == 0)
  {
    Motor1.spin(forward);
    Motor2.spin(forward);
    Motor7.spin(forward);
    Motor8.spin(forward);
  }
  else
  {
    Motor1.stop();
    Motor2.stop();
    Motor7.stop();
    Motor8.stop();

  }

    
  

    // Motor1.spin(reverse);
    // Motor2.spin(reverse);
    // Motor7.spin(reverse);
    // Motor8.spin(reverse);
  
  

}
}

// // "when started" hat block
// int whenStarted1() {
  
//   return 0;
// }


int main() {
  // Calibrate the Drivetrain Gyro
  //calibrateDrivetrain();

  Drivetrain.setDriveVelocity(100,percent);
  Drivetrain.setTurnVelocity(100,percent);
  Motor1.setVelocity(100,percent);
  Motor2.setVelocity(100,percent);
  Motor7.setVelocity(100,percent);
  Motor8.setVelocity(100,percent);
  Pneumatic9.pumpOn();
  Controller.ButtonLDown.pressed(Forward);
  Controller.ButtonLUp.pressed(Backward);
  Controller.ButtonLUp.released(stop);
  Controller.ButtonLDown.released(stop);
  Controller.ButtonFDown.pressed(bucket_intake_pnumatic_ret);
  Controller.ButtonFUp.pressed(bucket_intake_pnumatic_ext);
  //Controller.ButtonL3.released(purple_blocker_ret);
  Controller.ButtonR3.pressed(purple_blocker_ext);
  Controller.ButtonRDown.pressed(buk_down);
  Controller.ButtonRUp.pressed(buk_up);
  Controller.ButtonRDown.released(stop);
  Controller.ButtonRUp.released(stop);

}
